A branch on which to prototype a model of move-tracking and branching.

Merge policy:

  Development branch -- periodic catch-up merges from trunk.

  The work on this branch may or may not eventually be wanted on trunk. It
  is not intended to be kept in a state where it could be merged to trunk.


Reviewing:

  Please do try out the 'svnmover' utility, explore how branching and
  subbranching and moving interact, and review and discuss the behavioural
  aspects of the model being prototyped here.

  Please don't review for 'quality of implementation' issues, not even
  big-O complexity concerns etc. The goal of this work is for us to learn
  about the behavioural model that we want. Designing a proper
  implementation will come later.


The model:

    Imagine a user who:

      - is familiar with version control concepts
      - is not familiar with Subversion specifics
      - expects directories to be versioned (not just files)
      - expects move tracking (as opposed to move 'detection')

    The design aims to satisfy such a user.


Work on this branch:

  * 'svnmover'

    A proof-of-concept utility for playing with moves and branching.
    'svnmover' is a user interface that lets us try out scenarios in
    which branching and moving are significant, to see what we expect
    and see if we can write code that delivers it.

    'svnmover' operates directly on a repo, like 'svnmucc'. Working copy
    considerations -- mixed-rev states, sparse checkouts, conflicts, and
    so on -- are completely avoided. A working copy is, in essence, a tool
    for viewing and making changes to the versioned data, and so needs to
    be designed to support the versioned data model. That comes *after*
    designing the data model. Working copy considerations may be introduced
    to 'svnmover' in due course in order to explore how they would work.

    'svnmover' processes a series of commands given on the command line, and
    then commits the result. In interactive mode (when run with no command
    arguments) it makes one commit per line of input.

    The implementation stores metadata either in revprops or in flat files
    in the repository directory; the metadata is the same in either case.

    STATUS

    This is my current focus.

    Implemented:
      basic edits: add file/dir, move, copy, delete
      branching: branch, create new branch, list branches
      diff
      merge

    UI things to do:
      provide a way to specify a mixed-rev base state
      provide a UI for element-based addressing ('mv e101:foo e103:foo'?)

    Bigger things to do:
      "replay": convert committed changes to an edit drive
      heuristic conversion of old repositories:
        synthesize element tracking info (instead of aborting) when reading
        a revision that was committed by a non-move-tracking client


  * The model.

    To do:
      clarify the sequencing requirements of editing: for example,
        requesting the full path to an element implies finalization of
        at least it and all its parent elements
      copying: model copying as a (tree) relationship between elements
        that is the same across all branches in a family?


  * A 'commit editor' interface supporting moves

    STATUS

    First I tried:

        Type 1: stateful/incremental; path-based addressing

        (subversion/include/private/svn_editor3p.h)

    This is an evolution of the old delta editor, trying to add on moves.
    Starting from an Ev1 code base, this one seems easier to start using,
    as the style is more familiar.

    Ev1->Ev3->Ev1 shims are written, using the 'incremental' API. Tests
    pass with double-shim conversions at RA layer and repos layer. (One
    svnlook test fails due to svnlook reporting a no-op change as a
    change.)

    However, this version of the editory is not complete with respect to
    branching: it only provides the operations that are needed *within* a
    branch. It could, I suppose, be extended to support operations on
    branches, including both the 'branching' operation itself, and also
    dealing with sub-branches found in the scope of subtree operations
    such as move, copy, and delete.

    However, now I believe the future lies in:

        Type 2: stateless/independent per-element changes

        (subversion/include/private/svn_element.h,
         subversion/include/private/svn_branch.h,
         subversion/include/private/svn_editor3e.h)

    (The functionality is currently partially encapsulated in
    an 'editor' class with a vtable of methods, and partially
    provided as plain functions in svn_branch.h. This needs to be
    sorted out.)

    I think this one is ultimately better and easier to use.

    I think it's not a question of one way is right and one is wrong;
    rather, both are possible correct approaches.


  * Adapt the editor as necessary to use as an 'update editor'.

    The 'update editor' has some significantly different requirements,
    at least the way it's implemented today with WC paths being
    communicated rather than repository paths/nodes. Need to work out
    how best to achieve this.
    My preference is to lean towards using a 'tree editor' working on
    repos nodes, and let the client side convert these to WC paths, but
    we'll have to see if that's practical.

    STATUS

    Not started.


Terminology:

  'Ev3'/'svn_editor3_t' is a temporary name. It should end up
  replacing Ev2 and so should be called 'Ev2'/'svn_editor_t' then.
  Or perhaps 'svn_branch[ing]_editor'.

  'branch sibling' -> 'branch segment'?

  'branch instance' -> 'branch rev'/'branch txn'/'branch version'?
