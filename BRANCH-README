Branch to implement atomic revprop modifications in libsvn_ra.  By "atomic", we
mean: the old value (if any) of the revprop as seen by the client modifying it
is the same as the old value the FS layer sees at the time it enacts the change.
This feature may be used to fully resolve issue #3546 (race condition in svnsync
locking) and to implement 'svn propedit --revprop pname pval2 --old-value=pval'.


Planned work
============

* FS layer support
  - [DONE] r955136, r955303, r955306 on trunk.

* repos layer support
  - [DONE] extend svn_repos_fs_change_rev_prop3() to wrap svn_fs_change_rev_prop2()
  - [DONE] make sure *OLD_VALUE_P isn't used unless user has read access

* RA layer support
  - [DONE] introduce svn_ra_change_rev_prop2()
      Need a new libsvn_ra-level capability.  (because atomicity can't be
      achieved with older servers, and because of planned protocol extensions)
  - [DONE] ra_local: Trivial.
  - [DONE] ra_svn: Add a 'change-rev-prop2' verb.
  - [DONE] ra_dav: Extend PROPPATCH: see notes/http-and-webdav/webdav-protocol
  - [DONE] unit test: prop_tests.py 34: atomic_over_ra()
  - upgrade svn_ra_change_rev_prop() callers

* [DONE] client support: svn_client_revprop_set2()

* svnsync:
  - use the new RA API to resolve the race condition in locking.


Potential work
==============

* svn_log__ interface
  - extend svn_log__change_rev_prop() with a "was old value provided?" boolean

* [needsdesign] specific error code for the "expectation didn't match" condition?

* repos layer hooks interface
  - pass the old value to pre-revprop-change

* svn propedit --revprop --old-value
  (Not planned currently.)
