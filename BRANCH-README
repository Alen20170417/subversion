FSFS locking doesn't scale well as lock and unlock operate on single
paths and every operation has to rewrite all the digests and the digest
of '/' refers to every lock in the repository.  A long-term solution
probably involves a repository upgrade to a new storage scheme but a
short-term fix is to operate on multiple paths and reduce the number
of times the digest files are written.

Create new APIs that operate on multiple paths:

  svn_fs_lock2
  svn_fs_unlock2
  svn_repos_fs_lock2
  svn_repos_fs_unlock2

For ra_local connect svn_ra__vtable_t.lock and unlock to the repos
functions.

For svnserver connect "lock-many" and "unlock-many" to the repos
functions.

For ra_local, svnserve and mod_dav_svn connect the server-side
unlocking after a commit to the repos functions.


Some performance measurements: I'm testing commands such as:

   svn lock   wc/*.jpg
   svn unlock wc/*.jpg
   svn commit wc         # without --no-unlock

where the commands modify 1,000 locks.  With trunk these commands take
over 0.5s in a repository that has no other locks, and over 20s in a
repository that has 99,000 locks spread over other branches.  With the
new code the commands take less than 0.3s with no other locks and less
than 0.5s with 99,000 other locks.

Note that the commit improvement applies to all RA layers but the lock
and unlock improvements do not apply to DAV since the DAV protocol
uses per-path LOCK and UNLOCK requests.  To get the lock and unlock
improvements over DAV will require adding some form of multiple-path
requests to the protocol.
