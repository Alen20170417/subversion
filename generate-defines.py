import sys, re, errno, os, tempfile, glob

# Edit this list of includes to set a new set of includes
include_dirs = ["/usr/local/apache2/include",
                "/usr/local/include/subversion-1"]

# Build a list of all the constants we can find
constant_detector = ""
constant = re.compile(r"((?:APR|SVN)\w+)")
constants = {}
for dir in include_dirs:
    for f in glob.glob("%s/*.h" % dir):
        filename = os.path.basename(f)
        constant_detector += "#include <%s>\n" % filename
        for line in file(f):
            for m in constant.findall(line):
                constants[m] = 1


constants = constants.keys()
constants.sort()
for c in constants:
    constant_detector += "PYTHON_%s = %s\n" % (c, c)

includes = ""
for include in include_dirs:
    includes += "-I%s " % include

f = tempfile.NamedTemporaryFile()
f.write(constant_detector)
f.flush()

# Print out our results
print '# This file was autogenerated by generate-defines.py'
child_stdout = os.popen("cpp %s %s 2>/dev/null" % (includes, f.name))
constant_match = re.compile(r"^PYTHON_(\w+) = (.*)")
numbertype = re.compile(r"\b(\d+)[UL]+\b")
for line in child_stdout:
    line = numbertype.sub(r"\1", line)
    m = constant_match.match(line)
    if m:
        val = None
        try:
            val = eval(m.group(2))
        except:
            pass
        else:
            if isinstance(val, (int, float, tuple, list)):
                print '%s = %s' % (m.group(1), val)
            elif isinstance(val, str):
                if '"' not in val and '\\' not in val and '\\' not in m.group(2):
                    print '%s = "%s"' % (m.group(1), val)
                else:
                    print '%s = %s' % (m.group(1), m.group(2))
            else:
                print '%s = %s' % (m.group(1), m.group(2))
                    
        
