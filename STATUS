Please review the following patches in this branch.
They will be merged into /trunk after passing the review.


* r985472
 Minimize the number of retry attempts when looking for an
 unused temporary file name.
 Justification:
   Some functions (e.g. svn export) request temp file names without
   any randomized sub-string in it, thus retries may take longer and
   longer. This seems to hurt SVN developers more often than
   ordinary users (process gets killed more frequently) but it also
   makes the client less sensitive to cluttered TEMP folders etc.
 Merge:
   Merged to trunk in r1022707.
 Thoughts:
   HKW: After some discussion of the merge to trunk, I committed r1025660 to
        the branch, and merged that trunk, removing the randomization part
        of this patch.  The tenor of the discussion was that folks needing
        random names should be using something like svn_io_open_unique_file3().
        Perhaps we should look at callers and switch them to use this new
        API?

* r985500
 Just another temp file name handling improvement: Use the already
 properly encoded file name information from the APR file instead
 of constructing it.
 Justification:
   Further reduction of the client-side overhead in svn export
   (and possibly others).
 Merge:
   Merged to trunk in r1027192.  From the log message: "While functionally
     correct, I think some of the function names could be improved, but
     that's a bikeshed we can have on trunk."

* r985606, r1028092
 A somewhat larger change: Reduce the ra_svn de-marshalling
 overhead mainly by pre-allocating sufficient container capacity
 in various places.
 Justification:
   In LAN environments, the data processing on the client becomes
   a bottleneck for faster servers.

* r986453
 An even larger change: Speed up file translation by further optimizing
 the search for "interesting chars" and replacing EOLs only if they
 have actually changed (allowing for larger chunks of data per write
 output operation).
 Justification:
   Apart from the physical I/O and the MD5 translation, this is the
   most CPU-demanding part of an svn export. This patch more than
   doubles its performance. It should also speed up svn checkout by
   the same amount (not factor) of time.

* r1028094
 Exploit knowledge of APR pool allocation interna to allocate sightly
 larger capacity stringbuf containers without actually using more memory.
 Justification:
   Very low computational overhead that should prevent costly
   re-allocations when working with small or empty strings.
   Also, this does not make the functionality (correctness) 
   of the code depend on APR internals.
